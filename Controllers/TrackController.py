from datetime import date
from bot_init import bot

class TrackController:
    def __init__(self, track_repository, sprint_repository):
        self.track_repository = track_repository
        self.sprint_repository = sprint_repository

    def store(self, message):
        user_id = message.from_user.id
        current_date = date.today()
        sprint_id = self.sprint_repository.get_last_sprint_id()

        is_track_exists = self.track_repository.get_track(user_id, sprint_id, current_date)
        if is_track_exists:
            bot.send_message(message.chat.id, "–°–æ—Ä—è–Ω, –æ—Ç–º–µ—á–∞—Ç—å—Å—è –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –¥–µ–Ω—å üî´ü§†`")
            return

        result = self.track_repository.store(user_id, sprint_id, current_date)
        tracks_count = self.track_repository.get_user_tracks_at_sprint(user_id, sprint_id)
        reply_message = self._create_reply_from_tracks_count(tracks_count)
        bot.send_message(message.chat.id, reply_message)

    def _create_reply_from_tracks_count(self, tracks_count):
        message = ''
        for i in range(tracks_count):
            message += 'üåü'
        message += '\n'
        if tracks_count > 3:
            message += f"–ù–µ–ø–ª–æ—Ö, —É–∂–µ {tracks_count} –æ—Ç–º–µ—Ç–∫–∏ –≤ —ç—Ç–æ–º —Å–ø—Ä–∏–Ω—Ç–µ"
        elif tracks_count > 6:
            message += f"–•–∞—Ä–æ—à –±—Ä–∞—Ç, —É–∂–µ {tracks_count} –¥–Ω–µ–π –µ–±–∞—à–∏—à—å!"
        elif tracks_count > 10:
            message += f"–ü–∏–∑–¥–µ—Ü —á–µ –∑–∞ –º–æ–Ω—Å—Ç—Ä, {tracks_count} –ø–æ–¥—Ä—è–¥, –∞—Ö—É–π"
        else:
            message += f"–û—Ç–ª–∏—á–Ω–æ–µ –Ω–∞—á–∞–ª–æ"
        return message
